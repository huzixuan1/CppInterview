/**
 * 关于const修饰符
 */


// const int* p;
// 含义：p 是一个指针，指向的是一个 const int 类型的对象。
// 限制：
//  你不能通过 p 修改它指向的对象的值。
//  但是你可以让 p 指向其他对象。

int a = 10, b = 20;
const int* p = &a;  // p 指向一个 const int
*p = 30;            // 错误：不能修改 p 指向的对象
p = &b;             // 可以让 p 指向其他对象

// int* const p;
// 含义：p 是一个常量指针，指向的是一个 int 类型的对象。
// 限制：
//  你不能修改 p 本身的值（即不能让 p 指向其他对象）。
//  但你可以通过 p 修改它指向的对象的值。
int a = 10, b = 20;
int* const p = &a;  // p 是常量指针，指向 a
*p = 30;            // 可以修改 p 指向的对象
p = &b;             // 错误：不能修改 p 本身的值

// const int* const p;
// 含义：p 是一个常量指针，指向的是一个 const int 类型的对象。
// 限制：
//     不能修改 p 本身的值（不能指向其他对象）。
//     也不能通过 p 修改它指向的对象的值。
int a = 10, b = 20;
const int* const p = &a;  // p 是常量指针，指向 const int
*p = 30;                  // 错误：不能修改 p 指向的对象
p = &b;                   // 错误：不能修改 p 本身的值


// reference
// int& ref = a;
// 含义：ref 是一个普通引用，可以通过它修改所绑定的对象。
// 限制：引用一旦绑定到某个对象，就不能重新绑定到另一个对象
int a = 10, b = 20;
int& ref = a;  // ref 是 a 的引用
ref = 30;      // 通过 ref 修改 a 的值
ref = b;       // 错误：ref 不能重新绑定到 b


// const int& ref = a;
// 含义：ref 是一个 const 引用，你不能通过它修改所绑定对象的值。
// 特性：
//  可以绑定到一个常量对象（或者临时对象）。
//  无法通过 ref 修改所绑定对象的值。
const int a = 10;
const int& ref = a;  // ref 是 a 的 const 引用
ref = 20;            // 错误：不能修改 a 的值

int b = 30;
const int& ref2 = b;  // ref2 是 b 的 const 引用
ref2 = 40;           // 错误：不能通过 ref2 修改 b 的值


// const 引用绑定临时对象
// const 引用的一个特别之处是，
// 它可以绑定到一个临时对象，确保临时对象的生命周期延长至引用的作用范围
const int& ref = 10;  // ref 绑定到临时对象 10
std::cout << ref;     // 输出 10
// 如果是普通引用，则无法绑定到临时对象。
int& ref = 10;  // 错误：普通引用不能绑定到临时对象


| 组合形式              | 含义                                                             |
|-----------------------|------------------------------------------------------------------|
| `const int* p`        | 指针 `p` 指向的对象是 `const`，不能通过 `p` 修改对象值。        |
| `int* const p`        | 指针 `p` 是 `const`，不能修改 `p` 本身的值。                 |
| `const int* const p`  | 指针 `p` 是 `const`，且它指向的对象也是 `const`。             |
| `int& ref = a`        | 普通引用，可以通过它修改所绑定对象的值。                       |
| `const int& ref = a`  | 常量引用，不能通过它修改所绑定对象的值，可以绑定临时对象。        |



