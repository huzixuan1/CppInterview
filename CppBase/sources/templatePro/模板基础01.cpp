/**
 * 1、模板的概念
 *  模板是实现代码重用机制的一种工具，它可以实现类型参数化
 *  即把类型定义为参数，从而实现了真正的代码重用
 *  模板：
 *      1、函数模板
 *          参数实例化->模板函数
 *      2、类模板
 *          参数示例话->模板类->对象
 * 2、函数模板与模板函数
 *  2.1函数模板：
 *      template<class 类型参数>
 *      返回类型 函数名(模板形参表)
 *      {
 *          函数体 
 *      }
 *          // template是一个申明模板的关键字，它表明一个模板
 *          // class (或typename)表示任何类型的意思
 * 
 *  2.2函数模板的使用
 *      当编译系统发现有一个函数调用：
 *          函数名(模板实参表);
 *      将根据模板实参表中的类型生成一个函数即模板函数。该模板函数的函数体
 *      与函数模板的函数的定义体相同。
 * 3、类模板与模板类
 *  定义类模板的一般格式为:
 *      template<类型形参列表>
 *      class 类模板名
 *      {
 *          类模板体定义
 *      };
 *  列表如:<typename T1,typename T2,……>
 * 
 *  类模板的成员函数可以放在类模板的定义体中,与普通成员函数定义方法一样，
 *  也可以放在类模板的外部定义，类模板的成员函数其实都是函数模板，其定义形式如下:
 *      template<类型形参列表>
 *      函数返回类型 类模板名<类型名表>::函数名(形参表)
 *      {
 *          函数体   
 *       }
 * 
 *  类模板的使用
 *  先确定类模板的实例，即模板类，
 *  然后再用该类定义对象，其格式如下:
 *      类模板名<类型实参表> 对象名;
*/


